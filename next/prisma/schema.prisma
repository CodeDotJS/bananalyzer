// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  TestSuite     TestSuite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TestSuite {
  id       Int    @id @default(autoincrement())
  name     String
  errors   Int
  failures Int
  skipped  Int
  tests    Int
  time     Float
  hostname String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String
  createdBy   User       @relation(fields: [createdById], references: [id])
  testCases   TestCase[]

  @@index([name])
}

model TestCase {
  id        Int     @id @default(autoincrement())
  name      String
  classname String?
  time      Float
  status    String
  message   String?

  testSuiteId      Int
  testSuite        TestSuite          @relation(fields: [testSuiteId], references: [id])
  TestCaseProperty TestCaseProperty[]

  @@index([name])
}

model TestCaseProperty {
  id    Int    @id @default(autoincrement())
  name  String
  value String

  testCaseId Int
  testCase   TestCase @relation(fields: [testCaseId], references: [id])

  @@index([name])
}
