var chatModule = {
  supportedTransactionalCountries: ['jp'],
  unsupportedExpertBrands: ['converse','hurley'],
  supportedExpertCountries: {
    // be: ['lifestyle', 'running', 'training', 'training & gym', 'gym & training', 'track & field'],
    // cz: ['lifestyle', 'running', 'training', 'training & gym', 'gym & training', 'track & field'],
    // dk: ['lifestyle', 'running', 'training', 'training & gym', 'gym & training', 'track & field'],
    // fi: ['lifestyle', 'running', 'training', 'training & gym', 'gym & training', 'track & field'],
    // gb: ['lifestyle', 'women', 'training', 'running', 'training & gym', 'gym & training', 'track & field'],
    // hu: ['lifestyle', 'running', 'training', 'training & gym', 'gym & training', 'track & field'],
    // ie: ['lifestyle', 'running', 'training', 'training & gym', 'gym & training', 'track & field'],
    // lu: ['lifestyle', 'running', 'training', 'training & gym', 'gym & training', 'track & field'],
    // nl: ['lifestyle', 'running', 'training', 'training & gym', 'gym & training', 'track & field'],
    // pt: ['lifestyle', 'running', 'training', 'training & gym', 'gym & training', 'track & field'],
    // se: ['lifestyle', 'running', 'training', 'training & gym', 'gym & training', 'track & field'],
    // si: ['lifestyle', 'running', 'training', 'training & gym', 'gym & training', 'track & field'],
    us: ['lacrosse', 'running', 'soccer', 'soccer/football', 'lifestyle', 'baseball / softball', 'training', 'training & gym', 'gym & training', 'women', 'track & field', 'nomatch']
  },
  languagesSupported: [
    // 'en_gb',
    'en_us',
    'es_la'
  ],
  createChatInviteElem: function(text) {
    //var defaultIconClass = 'nsg-glyph--live-chat';
    var defaultIconMobileStyle = 'vertical-align: middle; height: 24px; margin-right: 20px';
    var defaultIconDesktopStyle = 'vertical-align: middle; height: 24px; margin-right: 12px; margin-left: 20px';
    var defaultTextStyle = 'vertical-align: middle; position: relative; top: -1px; font-size: 12px; color: black;' +
      'text-decoration: underline; background: transparent; font-family: Helvetica Now Text Medium,Helvetica,Arial,sans-serif;';
    var defaultInviteLinkClass = 'nsg-font-family--base exp-pdp-promo-message-link exp-pdp-chat-container';

    var isMobile = document.getElementsByName('isMobile').length > 0 ? document.getElementsByName('isMobile')[0].value : false;
    var iconElem = document.createElement('img');
    if (isMobile) {
      iconElem.setAttribute('src', 'https://www.nike.com/chat/pdp-chat-invite-mobile.png');
      iconElem.setAttribute('style', defaultIconMobileStyle);
    }
    else {
      iconElem.setAttribute('src', 'https://www.nike.com/chat/pdp-chat-invite-desktop.png');
      iconElem.setAttribute('style', defaultIconDesktopStyle);
    }

    var parentElem = document.createElement('div');
    parentElem.setAttribute('class', 'exp-pdp-promo-message-text-link-wrapper');

    var linkElem = document.createElement('button');
    var textNode = document.createTextNode(text);
    linkElem.setAttribute('style', defaultTextStyle);
    linkElem.setAttribute('class', defaultInviteLinkClass);
    linkElem.appendChild(textNode);

    parentElem.appendChild(iconElem);
    parentElem.appendChild(linkElem);

    return parentElem;
  },

  handleInviteClick: function() {
    dispatchEvent(new Event('launchAsyncChat'));
  },
  isTransactionalChatSupported: function(country) {
    return this.supportedTransactionalCountries.indexOf(country) > -1;
  },
  isExpertChatSupported: function(country, brand, lob, language) {
    return (this.supportedExpertCountries.hasOwnProperty(country) &&
      this.supportedExpertCountries[country].indexOf(lob) > -1 &&
      this.languagesSupported.indexOf(language.toLowerCase()) > -1 &&
      this.unsupportedExpertBrands.every((unsupportedBrand) => !brand.includes(unsupportedBrand)));
  },
  isGenderMale: function(gender) {
    return gender === '1' || gender === 'men';
  },
  isGenderFemale: function(gender) {
    return gender === '2' || gender === 'women';
  },
  getChatRParam: function(country, brand, lob, gender, category, language) {
    if (!lob) return brand || 'store';

    if (this.isExpertChatSupported(country, brand, lob, language) &&
      (lob === 'training & gym' || lob === 'gym & training' || lob === 'training')) {
      if (this.isGenderFemale(gender)) {
        return 'women';
      } else if (this.isGenderMale(gender) && country !== 'us') {
        return undefined;
      } else if (this.isGenderMale(gender)) {
        return 'menstraining';
      }
    } else if (this.isExpertChatSupported(country, brand, lob, language) && lob === 'track & field') {
      // Track & field chats go to running experts
      return 'running';
    } else if (this.isExpertChatSupported(country, brand, lob, language) && lob === 'baseball / softball') {
      // If 'baseball / softball', /r/ should be 'baseball' only for men
      if (this.isGenderMale(gender)) {
        return 'baseball';
      }
    } else if (this.isExpertChatSupported(country, brand, lob, language) && lob === 'lifestyle') {
      // If women's lifestyle, then go to /r/women
      if (this.isGenderFemale(gender)) {
        return 'women';
      } else {
        return undefined;
      }
    } else if (this.isExpertChatSupported(country, brand, lob, language) && lob === 'running') {
      // Running apparel goes to women or running for men
      if (category === 'running apparel' && this.isGenderFemale(gender)) {
        return 'women';
      } else {
        return 'running';
      }
    } else if (this.isExpertChatSupported(country, brand, lob, language)) {
      return lob;
    } else {
      //For transactional chat, /r/store will suffice
      return 'store';
    }
  },
  render: function() {
    try {
      // Target chatModule > chatModuleBody
      var chatModuleElem = document.getElementById('chatModule');
      var chatModuleBodyElem = document.getElementById('chatModuleBody');

      // Chat module may not be rendered in unsupported countries
      if (!chatModuleElem) {
        return;
      }

      // Values we need are stored as data attributes
      var lineOfBusiness = chatModuleElem.getAttribute('data-invite-context') ? chatModuleElem.getAttribute('data-invite-context').toLowerCase() : '';
      var brand = chatModuleElem.getAttribute('data-brand')
        ? chatModuleElem.getAttribute('data-brand').toLowerCase()
        : chatModuleElem.getAttribute('data-brands')
        ? chatModuleElem.getAttribute('data-brands').toLowerCase()
        : ''
      var geo = chatModuleElem.getAttribute('data-geo') ? chatModuleElem.getAttribute('data-geo').toLowerCase() : '';
      var category = chatModuleElem.getAttribute('data-category-id') ? chatModuleElem.getAttribute('data-category-id').toLowerCase() : '';
      var gender = chatModuleElem.getAttribute('data-gender');
      var language = chatModuleElem.getAttribute('data-lang-variant') ? chatModuleElem.getAttribute('data-lang-variant').toLowerCase() : '';

      // Are they supported?
      if (this.isExpertChatSupported(geo, brand, lineOfBusiness, language) || this.isTransactionalChatSupported(geo, brand, lineOfBusiness)) {
        // The ubiquitous /r/ parameter
        var chatRParam = this.getChatRParam(geo, brand, lineOfBusiness, gender, category, language);

        // Do we have an /r/ parameter
        if (chatRParam !== null && chatRParam !== undefined) {
          // Remove default is-hidden class since we're supported
          var hiddenRemovedClass = chatModuleElem.getAttribute('class').replace('is-hidden', '');
          chatModuleElem.setAttribute('class', hiddenRemovedClass);

          // Set some styles on our container
          chatModuleBodyElem.setAttribute('class', 'exp-pdp-content-container');
          chatModuleBodyElem.setAttribute('style', 'margin-left: 0');

          window.webShellClient.translations.fetch(['async-chat'])
            .then((translations) => translations['async-chat']['.comMessageButton'].value)
            .catch((e) => {
              console.error(e);
              return 'Message';
            })
            .then((linkText) => {
              var inviteLinkElem = this.createChatInviteElem(linkText);
              chatModuleBodyElem.appendChild(inviteLinkElem);

              inviteLinkElem.onclick = function (e) {
                window.chatModule.handleInviteClick(e);
              }
            });
        }
      }
    } catch (e) {
      console.log(e);
    }
  },
  initialize: function() {
    window.webShellClient.identity.initialize({ client: true }).then(function() {
      window.webShellClient.identity.getUserProfile().then(function(profile) {
        if (profile && profile.userType === 'MEMBER') {
          window.chatModule.render();
        }
      });
    });
  }
};

window.chatModule.initialize();
